{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/getMovie.tsx","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","key","imdbId","getMovie","a","movieUrl","fetch","getDatas","json","preparedDatas","hasOwnProperty","newMovieInfo","Plot","Title","imdbID","Poster","defaultData","FindMovie","hasAlready","addFilm","isNotHasAlready","useState","searchValue","setSearchValue","errorInput","setErrorInput","isFinded","setFindStatus","loading","setLoadingStatus","newMovie","setNewMovie","useEffect","firstLoad","setStatus","onSubmit","e","preventDefault","htmlFor","type","id","value","placeholder","onChange","target","onClick","preparedValue","replace","then","finally","disabled","App","setHasAlreadyStatus","data","setMovies","newFilm","some","dataWithNewMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0d4d29c3.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport { MoviesCard } from '../interfaces';\n\ntype Props = MoviesCard;\n\nexport const MovieCard: React.FC<Props> = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map((movie) => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import { MoviesCard } from './interfaces';\n\nexport const getMovie = async (title: string) => {\n  const APIkey = '12dad60c';\n  const movieUrl = `https://www.omdbapi.com/?apikey=${APIkey}&t=${title}`;\n  const getDatas = await fetch(movieUrl);\n  const preparedDatas = await getDatas.json();\n\n  if (preparedDatas.hasOwnProperty('Error')) {\n    return false;\n  }\n\n  const newMovieInfo: MoviesCard = {\n    description: preparedDatas.Plot,\n    title: preparedDatas.Title,\n    imdbId: preparedDatas.imdbID,\n    imdbUrl: '',\n    imgUrl: preparedDatas.Poster,\n  };\n\n  newMovieInfo.imdbUrl = `https://www.imdb.com/title/${newMovieInfo.imdbId}/?ref_=nv_sr_srsg_0`;\n\n  return newMovieInfo;\n};\n","import React, { useState, useEffect } from 'react';\nimport './FindMovie.scss';\nimport { MovieCard } from '../MovieCard';\nimport { getMovie } from '../getMovie';\nimport { MoviesCard } from '../interfaces';\n\ninterface Props {\n  hasAlready: boolean;\n  addFilm: (newFilm: MoviesCard) => void;\n  isNotHasAlready: () => void;\n}\n\nconst defaultData = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n}\n\nexport const FindMovie: React.FC<Props> = ({ hasAlready, addFilm, isNotHasAlready }) => {\n  const [searchValue, setSearchValue] = useState('');\n  const [errorInput, setErrorInput] = useState(false);\n  const [isFinded, setFindStatus] = useState(false);\n  const [loading, setLoadingStatus] = useState(false);\n  const [newMovie, setNewMovie] = useState(defaultData as MoviesCard | null);\n\n  useEffect(() => {\n    firstLoad();\n  }, [])\n\n  useEffect(() => {\n    setStatus();\n  }, [isFinded, loading, newMovie]);\n\n  const handleInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchValue(e.target.value);\n\n    if (e.target.value) {\n      setErrorInput(false);\n    } else {\n      setErrorInput(true);\n    }\n  };\n\n  const findMovie = () => {\n    setLoadingStatus(true);\n\n    if (!searchValue) {\n      setErrorInput(true);\n\n      return;\n    }\n\n    setErrorInput(false);\n    isNotHasAlready();\n\n    const preparedValue: string = searchValue.replace(/ /g, '+');\n\n    getMovie(preparedValue)\n      .then((movie) => setNewMovie(movie as MoviesCard))\n      .finally(() => setLoadingStatus(false));\n  };\n\n  const reset = () => {\n    setSearchValue('');\n    setNewMovie(null);\n    setErrorInput(false);\n    setFindStatus(false);\n  };\n\n  const firstLoad = () => {\n    setNewMovie(null);\n  }\n\n  const setStatus = () => {\n    if (newMovie && newMovie.title) {\n      setFindStatus(true);\n      setErrorInput(false);\n    } else {\n      setErrorInput(true);\n      setFindStatus(false);\n    }\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={e => {\n          e.preventDefault();\n        }}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              value={searchValue}\n              placeholder=\"Enter a title to search\"\n              className={!loading && errorInput ? 'is-danger input' : 'input'}\n              onChange={handleInput}\n            />\n          </div>\n          {!loading && errorInput && (\n            <p className=\"help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={findMovie}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              disabled={!isFinded || errorInput}\n              onClick={() => {\n                if (newMovie) {\n                  addFilm(newMovie);\n                }\n\n                reset();\n              }}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        <h2 className=\"title\">Preview</h2>\n        {loading && (\n          <p>Loading...</p>\n        )}\n\n        {!loading && newMovie && (\n          <MovieCard {...newMovie} />\n        )}\n\n        {!loading && !newMovie && hasAlready && (\n          <p>This movie already there</p>\n        )}\n\n        {!loading && !newMovie && !hasAlready && (\n          <p>Please, write correctly title</p>\n        )}\n      </div>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\nimport { MoviesCard } from './components/interfaces';\n\nexport const App: React.FC = () => {\n  const [hasAlready, setHasAlreadyStatus] = useState(false);\n  const [movies, setMovies] = useState(data);\n\n  const isNotHasAlready = () => {\n    setHasAlreadyStatus(false);\n  };\n\n  const addFilm = (newFilm: MoviesCard) => {\n    const isHasAlready = movies\n      .some(movie => movie.imdbId === newFilm.imdbId);\n\n    if (!isHasAlready) {\n      const dataWithNewMovies = [...movies, newFilm];\n\n      setMovies(dataWithNewMovies);\n    } else {\n      setHasAlreadyStatus(true);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          hasAlready={hasAlready}\n          addFilm={addFilm}\n          isNotHasAlready={isNotHasAlready}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}